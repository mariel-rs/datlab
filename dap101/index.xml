<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Análisis de Datos en Python on Español</title><link>https://mariel-rs.github.io/datlab/dap101/</link><description>Recent content in Análisis de Datos en Python on Español</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://mariel-rs.github.io/datlab/dap101/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Introducción a Python</title><link>https://mariel-rs.github.io/datlab/dap101/1-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/1-intro/</guid><description>Introducción Python es un lenguaje de programación fácil de aprender, con estructuras de datos eficientes. Es considerado como el lenguaje más popular para aprender por su versatilidad, su enfoque sencillo y la cantidad de librerías disponibles para machine learning, análisis de datos y visualización de datos.
Salida por pantalla Lo primero que se suele hacer cuando aprendemos a programar es saludar&amp;hellip; Hello world
print(&amp;#34;Hello world&amp;#34;) print(1+1) Un comentario Los comentarios no se ejecutan.</description></item><item><title>2. Primer programa en Python</title><link>https://mariel-rs.github.io/datlab/dap101/2-first_program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/2-first_program/</guid><description>Operaciones Python puede realizar las siguientes operaciones matemáticas:
Suma
Se indica con el operador +
print(2 + 3) Resta
Se indica con el operador -
print(2 - 3) Multiplicación
Se indica con el operador *
# Multiplicaciones print(2 * 3) Potencias
Las potencias se indican con el operador ** (Python no usa ^ para indicar potencias como otros lenguajes)
# cuidado con el operador... print(2 ** 3) Divisiones
Dependiendo lo que se requiera, las divisiones se indican con el operador /, // o %</description></item><item><title>3. Bucles</title><link>https://mariel-rs.github.io/datlab/dap101/3-loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/3-loop/</guid><description>Bucles For Accesando una lista por sus elementos
# Una lista con numeros a = [1, 2, 10, 0, 6] for el in a: print(el) Range
range(j) # 0, 1, 2, ..., j-1 range(i, j) # i, i+1, i+2, ..., j-1 range(i, j, k) # i, i+k, i+2k, ..., i+m Algunos ejemplos
range_list = list(range(5)) print(range_list) ten_hundred = list(range(10, 101, 10)) print(ten_hundred) Accesando a la lista usando indices
# Ahora usamos indice for i in range(len(a)): print(a[i]) Ejercicio</description></item><item><title>4. Manejo de datos</title><link>https://mariel-rs.github.io/datlab/dap101/4-pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/4-pandas/</guid><description>Introducción pandas es la librería de Python más utilizada para procesar datos. pandas puede leer datos de archivos CSV, xls, xlsx, json, entre otros. La estructura de datos más común de esta librería es DataFrame, que es una estructura de datos tabular bidimensional con ejes etiquetados (filas y columnas).
Datos
Usaremos los siguientes archivos para los ejercicios de este tema:
Archivos estudiantes_mxuk2021.csv (9 KB) inah_visitantes_2022.csv (19 KB) Primeros pasos Creamos un Jupyter notebook como pandas.</description></item><item><title>5. Visualización</title><link>https://mariel-rs.github.io/datlab/dap101/5-visualizacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/5-visualizacion/</guid><description>Introducción La información que hemos procesado previamente se puede visualizar usando gráficos. En esta sección veremos como crear gráficos profesionales con matplotlib y seaborn.
Datos
Usaremos los siguientes archivos para los ejercicios de este tema:
Archivos aspirantes_inecol2020.csv (1 KB) estudiantes_mxuk2021.csv (9 KB) inah_visitantes_2022.csv (19 KB) matplotlib matplotlib es una librería de bajo nivel, es decir, necesitamos definir muchas cosas, pero tendremos más libertad y flexibilidad en nuestros gráficos.</description></item><item><title>6. Análisis estadístico</title><link>https://mariel-rs.github.io/datlab/dap101/6-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/6-stats/</guid><description>Introducción Python tiene bastantes librerías para realizar análisis estadístico. En esta sección nos concentraremos en SciPy y statsmodels.
Datos
Usaremos los siguientes archivos para los ejercicios de este tema:
Archivos aspirantes_inecol2020.csv (2 KB) derrama-economica-destino-turistico-generada-turismo-puebla.csv (1 KB) estudiantes_uk2021.csv (10 KB) FCN-DA-19-DDP-TPA.csv (382 KB) inah_bibliotecas_abiertas.csv (13 KB) inah_visitantes_2022.csv (20 KB) mayan_sites.csv (23 KB) precipitacion_guerrero.csv (3 KB) Temperatura_promedio.csv (146 KB) Librerias
Para esta seccion usaremos las siguientes librerias
import pandas as pd import matplotlib.</description></item><item><title>7. Proyecto final</title><link>https://mariel-rs.github.io/datlab/dap101/7-proyecto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariel-rs.github.io/datlab/dap101/7-proyecto/</guid><description>Descripción del proyecto Entregable</description></item></channel></rss>