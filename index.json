[{"content":"Ejercicios Salida por pantalla print(\"Hello world\") print(1+1) Un comentario # Hola, soy un comentario. print(\"Hello world\") print(1+1) # Hola, soy un comentario. # print(\"Hello world\") # Acabo de comentar esta linea print(1+1) Variables a = 2 print(a) Tipo de datos  Enteros (int)  a = 1 print(a) print(type(a)) Flotantes (float)  a = 3.98 print(a) print(type(a)) a = 1.0 print(a) print(type(a)) Booleanos (bool)  a = True print(a) print(type(a)) a = 1 print(a) print(type(a)) Cadenas de texto (str)  a = \"Hola\" print(a) Convertir tipos de datos  # Esto aunque parezca booleano, Python lo entendera como un entero bool_test = 1 print(bool_test) print(type(bool_test)) # Conversion de datos usando bool(), int(), float() real_bool = bool(1) real_int = int(2.0) Entrada por teclado  # Entrada por teclado usando input() print(\"Escriba su nombre\") nombre = input() # f strings ;) print(f\"Hola, {nombre}\") print(f\"La variable tiene el tipo de dato {type(nombre)}\") Estructuras Listas # Una lista vacia empty_list = [] str_list = [\"1\", \"2\", \"3\"] int_list = [1, 2, 3] mixed_list = [1, 1.0, \"2\", \"Hola\", True, \"True\", [1, 2]]  Imprimir en pantalla cada una de las listas  # Aqui va tu codigo  Cuantos elementos tiene la lista?  print(len(str_list))  Acceder a los elementos de la lista usando índices  # Todo empieza en cero... print(str_list[0]) print(str_list[3])  Agregar elementos usando append  str_list.append(\"4\") print(str_list[3])  Eliminar elementos usando remove  str_list.remove(\"4\") print(str_list) print(str_list[3]) Diccionarios # Un diccionario vacio empty_list = {} # Un diccionario de una bolsa de frutas fruit_bag = {'apples': 4, 'pears': 9, \"bananas\": 0} Tambien se puede escribir delimitando espacios (Mira la sangría)\n# Un diccionario de una bolsa de frutas, con espacios fruit_bag = { 'apples': 4, 'pears': 9, \"bananas\": 0 }  Consultar las Keys (Llaves) existentes en el diccionario. Método keys()  print(fruit_bag.keys())  Values (Valores) Método values()  print(fruit_bag.values())  Comprobar si existe una llave en el diccionario  print(\"kiwis\" in fruit_bag)  Acceder a valores usando una llave  # Cuantas manzanas hay? print(fruit_bag[\"apples\"])  Actualizar valores  # Ahora hay 5 manzanas fruit_bag[\"apples\"] = 5 print(fruit_bag)  Agregar nuevas llaves  # Agregando kiwis a la bolsa de frutas fruit_bag[\"kiwis\"] = 1 print(fruit_bag)  Eliminar una llave usando del  # Ya no es temporada de kiwis del fruits['kiwis'] print(fruits) Tarea   Crear una variable colegiatura que pida un valor al usuario.\n Imprimir el valor que el usuario introduce Imprimir el tipo de dato que tiene colegiatura Convertir el valor a float    Usando las listas mixed_list y str_list de los ejercicios, realizar los siguientes ejercicios:\n Agregar el último elemento de la lista str_list a la lista mixed_list Imprimir en pantalla:  Tipo de dato del primer elemento de mixed_list Elemento con índice 6 de de mixed_list   Reto Convertir el elemento con índice 1 a tipo int Reto Verificar si los elementos con índices 0 y 1 son del mismo tipo    Seguir el ejercicio de frutas en 5.1. More on Lists en el sitio de referencia de Python Estructuras de Datos\n  Crear un diccionario llamado estudiante con 3 llaves:\n “id” “clave_materia” “calificacion_final”  Ejercicios:\n Llenar el diccionario con un ejemplo de un estudiante Reto Llenar el diccionario con 3 estudiantes.    Opcional Consultar el sitio McLibre sobre los temas vistos en la sesión.\n   Información Las tareas se pueden realizar en un Jupyter notebook, o en un archivo .py.\n  ","description":"Ejercicios y tareas del material introductorio a Python","tags":null,"title":"1. Introducción a Python","uri":"/datlab/dap101/1-intro/"},{"content":"1 Inicio En esta sección se presentan los requisitos y recomendaciones técnicas para poder seguir los talleres, así como el detalle de los cambios hechos cada versión del sitio.\n","description":"","tags":null,"title":"Inicio","uri":"/datlab/basics/"},{"content":"Ejercicios Operaciones # Sumas print(2 + 3) # Restas print(2 - 3) # Multiplicaciones print(2 * 3) # Divisiones print(2 / 3) # Potencia print(2 ** 3) # Division print(38 / 5) # Cociente de la division print(38 // 5) # Residuo de la division print(38 % 5) Comparadores # Dos numeros x = 3 y = 4 # Menor que print(x \u003c y) # Igual que print(x == y) # No es igual que  print(x != y) # O print(x == y or 5 \u003e= 2) # Y print(x == y and 5 \u003e= 2) # Una nueva variable z = x \u003e y print(z) Condicionales If\nnumero = int(input(\"Escribe un número positivo: \")) if numero \u003c 0: print(f\"{numero}no es un número positivo\") print(f\"Ha escrito el número {numero}\") numero = int(input(\"Escribe un número mayor que 5: \")) if numero \u003c= 5: print(f\"{numero}no es un número estrictamente mayor que 5\") print(f\"Ha escrito el número {numero}\") If else\nprint(\"Entrada del BabyO\") edad = int(input(\"¿Cuántos años tiene? \")) if edad \u003c 18: print(\"No puede entrar\") else: print(\"Aunque es mayor de edad, esta lleno...\") If elif else\n# Multiples condiciones. Un banco con 3 cajeros cajeros = 3 clientes = int(input(\"Escriba el numero de clientes esperando en la fila \")) # Calcular cuantos cajeros estan disponibles cajeros_disp = cajeros - clientes if (cajeros_disp == cajeros): print(\"Todos los cajeros estan disponibles!\") elif (1 \u003c= cajeros_disp \u003c cajeros): print(f\"Hay {cajeros_disp}cajeros disponibles\") elif (cajeros_disp == 0): print(f\"No hay cajeros disponibles\") else: print(\"Intenta un numero mayor que 0 pero menor o igual a 3\") Funciones Estructura de una funcion\ndef mi_funcion(arg): # Aqui va el codigo return arg def otra_funcion(mensaje): # Aqui va el codigo print(mensaje) Más de un argumento\ndef mi_funcion(arg1, arg2): # Guarda los argumentos en una lista arg_list = [arg1, arg2] return arg_list Ejercicio\nEscribir una funcion media que calcule la media de dos numeros a y b, y que imprima el resultado en pantalla.\ndef media(a, b): # Aqui va tu codigo Tarea  Crea una función llamada temp_convert que toma la temperatura en grados Farenheit tf como argumento y la convierte a grados Celsius tc. La función deberá imprimir la temperatura en grados Celsius.  def temp_convert(tf): # Aqui va tu codigo   Consejo Puedes usar la función round(x, 2) para redondear el valor de x a 2 decimales\n  Para verificar tu función, puedes usar las siguientes pruebas:\n   Prueba Resultado     temp_convert(59) 15   temp_convert(32) 0    Crea una función llamada contabilidad que tome una lista pagos con los pagos del mes y una variable ingresos que indica el total de ingresos del mes como argumentos. La función deberá regresar el dinero que queda disponible.  def contabilidad(pagos, ingresos): # Aqui va tu codigo   Consejo Puedes usar la función sum(lista) para sumar todos los elementos de la lista\n  Para verificar tu función, puedes usar las siguientes pruebas:\n   Prueba Resultado     print(contabilidad([100, 300, 20], 750)) 330   print(contabilidad([300, 39, 700, 500, 220, 740], 2500)) 1    ","description":"Operaciones aritméticas. Condicionales. Funciones","tags":null,"title":"2. Primer programa en Python","uri":"/datlab/dap101/2-first_program/"},{"content":"DAP101 Análisis de Datos en Python En esta sección encontrarás los ejercicios en clase y las tareas para el taller Análisis de Datos en Python\n1. Introducción a Python Ejercicios y tareas del material introductorio a Python\n2. Primer programa en Python Operaciones aritméticas. Condicionales. Funciones\n3. Bucles Bucles: For, While\n4. Manejo de datos Manejo de datos con pandas\n5. Visualización Creación de gráficos y visualizaciones con matplotlib y seaborn\n6. Análisis estadístico Pruebas de hipótesis y regresiones usando SciPy\n7. Proyecto final Proyecto final para recapitular lo aprendido en el curso\n ","description":"","tags":null,"title":"Análisis de Datos en Python","uri":"/datlab/dap101/"},{"content":"Esta sección muestra las últimas novedades de la versión más reciente de este sitio. Para una lista más detallada, ver la página Historia.\nAnálisis de Datos en Python - Ejercicios y tareas Estaré impartiendo un curso de Análisis de Datos en Python en una universidad local el siguiente mes. Como primer proyecto de este sitio, subiré aquí los ejercicios y las tareas.\nEspero que con este primer curso, podamos impartir muchos más y compartir conocimiento a más personas \nDat Lab, ahora con Relearn Después de batallar un poco con unos bugs de Learn, decidí usar Relearn. Además que tiene funcionalidades más agradables para el usuario final.\nFinalmente, decidí cambiar el nombre del sitio a algo más genérico: Dat Lab.\nDat Lab, es un juego de palabras entre Dat, una abreviatura coloquial e informal de Data, y Lab, laboratorio. Entonces Dat Lab es el Laboratorio de Datos… , o también “Ese laboratorio” o, “Ese lab de datos…” \n","description":"","tags":null,"title":"Novedades","uri":"/datlab/basics/migration/"},{"content":"Ejercicios Bucles For Accesando una lista por sus elementos\n# Una lista con numeros a = [1, 2, 10, 0, 6] for el in a: print(el) Range\nrange(j) # 0, 1, 2, ..., j-1 range(i, j) # i, i+1, i+2, ..., j-1 range(i, j, k) # i, i+k, i+2k, ..., i+m Algunos ejemplos\nrange_list = list(range(5)) print(range_list) ten_hundred = list(range(10, 101, 10)) print(ten_hundred) Accesando a la lista usando indices\n# Ahora usamos indice for i in range(len(a)): print(a[i]) Ejercicio\n Usando un bucle For, calcular la media de un estudiante con las siguientes calificaciones:     Materia Calificaciones     Quimica 9   Biologia 8   Matematicas 9.5   Psicologia 8.5     Consejo Representa las calificaciones como una lista. Primero sumar y al final, dividir.\n  # Aqui va tu codigo While i = 1 while i \u003c= 3: print(0) i += 1 print(\"Hasta que se acabe el dedo\") Otro ejemplo\ni = 10 while i \u003e= 0: print(i) i -= 1 print(\"Cuenta terminada\") Un infinito\ni = 1 while i \u003c= 10: print(i) Casi infinito\n# Are you human? print(\"Eres una persona? Responde Si o No\") answer = input().lower() while(answer == \"si\"): print(\"En serio? Intenta otra vez. Responde Si o No\") answer = input().lower() Romper un bucle while con break\ndef break_loop(): contador = 0 while True: print(\"Deseas terminar el programa? Escribe Si o No\") respuesta = input() # Actualizar el contador contador += 1 if contador \u003e= 5: print(\"Ya me ejecute muchas veces. Voy a descansar.\") break Tarea Aprobado/No aprobado Consideremos el caso de un estudiante que tiene que presentar tres exámenes. La escala de evaluación es de 0 a 100 puntos.\nUn estudiante aprueba el año si:\n Se aprueban todos los exámenes con 40 puntos o más, o Se aprueban al menos dos exámenes con 40 puntos o más, y que la media de los tres exámenes sea estrictamente mayor a 50. (Es decir, una media de 50 puntos no es aprobatoria).  Escribe una función student_pass que tome tres argumentos, las calificaciones de los exámenes (como enteros), y determinar si el estudiante ha aprobado el año, utilizando dichas calificaciones. La función debería imprimir “Aprobado” o “No aprobado”.\nPuedes utilizar la siguientes pruebas para verificar tu función:\n   Prueba Resultado     student_pass(70, 50, 30) “No aprobado”   student_pass(70, 50, 35) “Aprobado”    “Dile que no” Escribe un programa que imprima en pantalla la pregunta\n“¿Desea continuar el programa?:”\nY que termine el programa solo cuando el usuario escriba “no”.\ndef dile_no(): # Aqui va tu codigo ","description":"Bucles: For, While","tags":null,"title":"3. Bucles","uri":"/datlab/dap101/3-loop/"},{"content":"Ejercicios Datos Para los ejercicios de este tema, usaremos los siguientes archivos:\n Archivos estudiantes_mxuk2021.csv (9 KB) inah_visitantes_2022.csv (20 KB)   Introducción  Creamos un Jupyter notebook como pandas.ipynb y creamos un cuadro con código. Analizaremos el archivo inah_visitantes_2022.csv.  Este archivo es especial por la presencia de tildes y porque usa , para separar miles. Esto se puede hacer usando las keywords encoding y thousands, respectivamente.\nimport pandas as pd import os # interfaces de sistemas operativos # definir la ubicacion del archivo path = os.path.join(os.getcwd(), \"inah_visitantes_2022.csv\") # Método read_csv() para leer el CSV y procesarlo como dataframe inah_visitantes2022 = pd.read_csv(path, thousands = \",\", encoding = \"latin-1\") # Miramos lo que contiene el dataframe inah_visitantes2022 # ver solo las primeras n filas inah_visitantes2022.head(5) Dimensiones Para inspeccionar las dimensiones de los datos importados, usamos el método shape\n# Dimensiones inah_visitantes2022.shape Esto nos devuelve una tupla (277, 10) que contiene el numero de (filas, columnas) que tienen estos datos.\nColumnas Para inspeccionar el nombre de las columnas, usamos el método columns\n# Columnas inah_visitantes2022.columns Ordenar datos  Ordenar por una columna, en orden ascendente  # Ordenar por una sola columna, \"enero_nac\". ascending = True por defecto inah_visitantes2022.sort_values(by=['enero_nac']) Ordenar por dos columnas, en orden descendente  # Ordenar por \"enero_nac, febrero_nac\" en orden descendente inah_visitantes2022.sort_values(by=['enero_nac', 'febrero_nac'], ascending = False) Series Podemos crear un DataFrame más pequeño sólo con algunas columnas.\n# Un dataframe con datos nacionales inah_visitantes_nac = inah_visitantes2022[[\"Centro INAH\", \"enero_nac\", \"febrero_nac\", \"marzo_nac\"]] # Mostrar 5 primeras filas inah_visitantes_nac.head(5) Series - Arreglo unidimensional de datos\n# Una serie con los datos de los centros INAH centros_inah = inah_visitantes2022[\"Centro INAH\"] centros_inah # Series pueden ser convertidas a lista enero_nac = inah_visitantes2022[\"enero_nac\"].to_list() Estadística descriptiva DataFrame Accedemos a las medidas descriptivas de los datos usando el método describe()\n Conteo Media Desviación típica Valor mínimo Primer cuartil (25%) Segundo cuartil o mediana (50%) Tercer cuartil (75%) Valor máximo  # Mostrar estadistica descriptiva de un DataFrame inah_visitantes2022.describe() Serie Para una serie con valores numéricos, se reportan las mismas medidas que en un DataFrame. Pero para una serie con valores de texto, se reportan:\n Conteo Valores únicos Top (Valor más frecuente) Frecuencia  # Mostrar estadistica descriptiva de una Serie inah_visitantes2022[\"Estado\"].describe() Selección de datos Condicionales  Una condición  # Sintaxis df[df[\"columna\"] condición] donde la condición puede ser una igualdad ==, diferente de !=, mayor o igual \u003e=, menor o igual \u003c=, estrictamente mayor \u003e o estrictamente menor \u003c.\n# Mostrar datos solo para el estado Guerrero inah_visitantes2022[inah_visitantes2022[\"Estado\"] == \"Guerrero\"] # Mostrar centros con mas de 1000 visitantes nacionales en enero inah_visitantes2022[inah_visitantes2022[\"enero_nac\"] \u003e= 10000] Múltiples condiciones  # Sintaxis df[(df[\"columna\"] condición1) operador_lógico df[\"columna\"] condición2) ... ] donde el operador lógico puede ser \u0026 (operador “y”) o | (operador “o”)\n# Mostrar los centros con mas de 1000 visitantes nacionales en Guerrero inah_visitantes2022[(inah_visitantes2022[\"Estado\"] == \"Guerrero\") \u0026 (inah_visitantes2022[\"enero_nac\"] \u003e 1000)] Método isin para múltiples valores a comparar de una misma columna  # Sintaxis df[df[\"columna\"].isin(lista)] Mostrar los centros con mas de 1000 visitantes nacionales en Guerrero y Quintana Roo en el mes de marzo\n# Seleccion de centros en Guerrero y Quintana Roo usando el metodo isin inah_visitantes2022[(inah_visitantes2022[\"Estado\"].isin([\"Guerrero\", \"Quintana Roo\"])) \u0026 (inah_visitantes2022[\"marzo_nac\"] \u003e 1000)] Método query  Cuando se tienen más de una condición, query puede ser más elegante\n# Sintaxis df.query('expresion') Para seleccionar los datos de centros INAH del estado de Guerrero con visitantes nacionales en enero mayores o igual a 1000, podriamos escribirlo como en el ejemplo 2, o usando query:\n# Seleccion usando query inah_visitantes2022.query('Estado == \"Guerrero\" \u0026 enero_nac \u003e= 1000') Ver valores por su label, o utilizando con condiciones, .loc[ ] # Vistas por condiciones. Tambien se pueden definir cuantas columnas mostrar inah_visitantes2022.loc[inah_visitantes2022[\"Estado\"] == \"Guerrero\", [\"enero_nac\", \"febrero_nac\"]] Parece igual…\n# Un DataFrame con labels en lugar de indices df_label = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield']) # loc, vistas por label df_label.loc[\"cobra\"] Ver valores por índices, .iloc[ ] # Sintaxis general df.iloc[fila_a: fila_b, columna_a: columna_b]  Una fila  # Primera fila, una serie inah_visitantes2022.iloc[0] # Primera fila, pero un dataframe inah_visitantes2022.iloc[[0]] Más de una fila, en desorden  # Mas de una fila, en distinto orden inah_visitantes2022.iloc[[7, 2, 0]] Celdas  # Celda ubicada en la fila 0, columna 3 inah_visitantes2022.iloc[0,3] Mostrar una selección de filas, en orden.  # Mostrar las filas 0, 1 y 2 inah_visitantes2022.iloc[0:3] Mostrar selección de filas y de columnas  # Mostrar las primeras (0:2) filas, las primeras 3 columnas (0:3) inah_visitantes2022.iloc[0:2,0:3] Agrupación de datos # Sintaxis df.groupby(by = \"columna\").funcion() La funcion puede ser:\n count() – Conteo sum() – Suma mean() – Media median() – Mediana min() – Valor minimo max() – Valor maximo std() – Desviacion tipica var() – Varianza  # Agrupar datos por estado, sumando valores inah_visitantes2022.groupby(by = \"Estado\").sum() Tarea Usando los datos en estudiantes_mxuk2021.csv, realizar los siguientes ejercicios. Puedes utilizar un jupyter notebook.\n ¿Cuántos estudiantes de Puebla estudian un posgrado? ¿Cuál es la edad promedio de los estudiantes que estudian un posgrado? Seleccionar los registros que satisfagan las siguientes condiciones:  Estudiantes mayores de 27 años y que no son de CDMX Estudiantes menores de 28 años y, que estudian en University of York y en University of Sussex   Calcular (tal vez sea útil usar groupby):  Número de estudiantes por universidad Número de estudiantes por estado ¿Cuál es la universidad con más estudiantes mexicanos?     Fuentes de datos   Visitantes a museos y zonas arqueologicas abiertas al publico. https://datos.gob.mx/busca/dataset/visitantes-a-museos-y-zonas-arqueologicas-abiertas-al-publico\n  Estudiantes de posgrado en el Reino Unido en 2021. Sin publicar\n  Sitios mayas https://www.kaggle.com/datasets/ujwalkandi/archaeological-sites-with-maya-inscriptions\n  ","description":"Manejo de datos con pandas","tags":null,"title":"4. Manejo de datos","uri":"/datlab/dap101/4-pandas/"},{"content":"Ejercicios Datos Para los ejercicios de este tema, usaremos los siguientes archivos:\n Adjuntos aspirantes_inecol2020.csv (2 KB) estudiantes_uk2021.csv (10 KB) inah_bibliotecas_abiertas.csv (13 KB) inah_visitantes_2022.csv (20 KB) mayan_sites.csv (23 KB)   matplotlib Barras Dispersión seaborn Pairplot para encontrar relaciones Histogramas Diagramas de caja (boxplot) Tarea ","description":"Creación de gráficos y visualizaciones con matplotlib y seaborn","tags":null,"title":"5. Visualización","uri":"/datlab/dap101/5-visualizacion/"},{"content":"Ejercicios Datos Para los ejercicios de este tema, usaremos los siguientes archivos:\n Adjuntos aspirantes_inecol2020.csv (2 KB) estudiantes_uk2021.csv (10 KB) inah_bibliotecas_abiertas.csv (13 KB) inah_visitantes_2022.csv (20 KB) mayan_sites.csv (23 KB)   Regresión Prueba de hipótesis Tarea ","description":"Pruebas de hipótesis y regresiones usando SciPy","tags":null,"title":"6. Análisis estadístico","uri":"/datlab/dap101/6-stats/"},{"content":"Descripción del proyecto Datos Para los ejercicios de este tema, usaremos los siguientes archivos:\nEntregable ","description":"Proyecto final para recapitular lo aprendido en el curso","tags":null,"title":"7. Proyecto final","uri":"/datlab/dap101/7-proyecto/"},{"content":"Especificaciones Se espera que la computadora para seguir los materiales publicados en este sitio tenga las siguientes especificaciones técnicas:\n Sistema operativo:  Windows 8 o superior MacOS 10.13 64-bit o superior Linux: Mientras sea una distribución soportada como Ubuntu, RedHat, Fedora, Debian…   Memoria RAM: Al menos 4 GB, pero mucho mejor más de 8 GB. Espacio en disco: Al menos 10 GB disponibles en disco.  Programas Para poder programar, necesitamos varias piezas que harán la vida más simple cuando empecemos a escribir código y ejecutar nuestros programas.\n Una distribución de Python. En otras palabras, el lenguaje de programación. Un editor de código o un entorno integrado de desarrollo para poder escribir código. Un editor de texto más adecuado que el que viene con la instalación típica de Windows o Mac.   Un sistema de control de versiones. Esto es para quienes colaboren en proyectos con una carga mayor de producción de código, con más colaboradores o no, y que se requiera un seguimiento más detallado del trabajo realizado. En caso de emergencias, control de versiones puede ayudarnos a recuperar archivos o volver a un punto donde el proyecto funcionaba de cierta manera :D  Para cada una de estas piezas, recomiendo los siguientes programas (Todos son gratuitos):\n Anaconda. Esta distribución contiene los paquetes más utilizados como matplotlib, NumPy, pandas, scipy, seaborn, entre otros; y los socorridísimos Jupyter notebooks. Visual Studio Code (También conocido como VSCode) como editor de código. Es liviano, multiplataforma y con bastantes extensiones que mejoran la experiencia de programación. Soporta varios lenguajes de programación. Para Python, he encontrado que VSCode es cómodo. Notepad++ es hasta ahora, el mejor editor de texto que he encontrado. Nos será muy útil para muchas más cosas, no sólo para programar. Git. Control de versiones libre más utilizado   Nota También existen los entornos integrados de desarrollo (Integrated Development Environment, IDE, en inglés) que son programas con muchas más funcionalidades que un editor de código. Por ejemplo, Visual Studio es muy conocido, aunque por lo mismo, puede ser pesado y consumir bastantes recursos. Para estos cursos, nos limitaremos a usar VSCode por su soporte multiplataforma y entorno modular.\n  ","description":"","tags":null,"title":"Prerrequisitos","uri":"/datlab/basics/requirements/"},{"content":"Aquí se detallan los pasos para la instalación de los programas listados en la sección de Prerrequisitos\nEn matemáticas, el orden de los factores no altera la suma ni el producto. Desafortunadamente, aquí sí afecta el orden de instalación :( Para evitar modificar variables de entorno posteriormente (y a mano), recomiendo el siguiente orden:\n Notepad++ Anaconda VSCode Git (Si se necesita usar control de versiones.)  Notepad++ Notepad++ es muy rápido de instalar y no causa problemas. Con seguir los pasos de la instalación es suficiente. \nAnaconda En algún punto de la instalación de Anaconda, veremos las opciones avanzadas:\nEncarecidamente recomiendo activar la casilla “Add Anaconda3 to my PATH environment variable”. Aunque el instalador dice que no es recomendable, es la mejor opción para que VSCode encuentre a Anaconda.\nVSCode Esta instalación es muy amigable. Sólo recomiendo revisar que la casilla “Add to PATH” esté activada.\nGit Cuando instalemos Git, el instalador pedirá seleccionar el editor de texto predeterminado. En la lista desplegable, elegir Notepad++ (Aquí es una de las razones por las que seguimos este orden de instalación). No pasa nada si no se cambia, pero en caso de necesitar hacer troubleshooting de un cambio hecho directamente en la consola de Git, Vim puede ser complicado al inicio.\n","description":"","tags":null,"title":"Instalación","uri":"/datlab/basics/installation/"},{"content":"Una vez que todo está instalado, recomiendo reiniciar el sistema antes de empezar. En sistemas Windows, se forza a que el sistema reconozca el contenido de las variables de entorno.\nVSCode va a ser nuestro editor de código. Como se mencionó anteriormente, es liviano y diseñado de tal manera que podemos personalizarlo con lo que necesitemos, haciéndolo muy cómodo incluso con computadoras con pocos recursos.\nExtensiones VSCode Para instalar extensiones, podemos hacerlo de dos formas:\n Visitando el sitio Marketplace de VSCode y buscando la extensión que deseamos instalar.   Directamente desde VSCode, visitando la tab de Extensions.   Soporte a Python Esto se logra instalando la extensión de Python para VSCode. La instalación es rápida. Esta extensión ya tiene integrados PyLance (nos dará tips para autocompletar expresiones mientras programemos) y soporte a Jupyter :)\nUna vez que esté instalada esta extensión, tenemos que asegurarnos que VSCode reconozca que Anaconda es nuestro intérprete de Python.\nPara esto, accedemos a la paleta de comando de VSCode usando los siguientes atajos:\n Windows / Linux: Ctrl+Shift+P o F1 MacOS: ⇧⌘P o F1  Buscamos interpreter y seleccionamos la opción Python: Select Interpreter\nAllí buscamos la opción ‘base’: conda. En una instalación nueva, sólo aparecerá esta opción. En mi caso tengo un ambiente adicional que cree para un proyecto de datos geoespaciales.\nSoporte a idioma español (opcional) VSCode se instala sólo con idioma inglés. Si deseas tener el software en español, puedes instalar la extensión Spanish Language Pack para que la interfaz esté en español. Es importante recalcar que la mayoría de la documentación y de los foros con tips estarán en inglés.\nTemas (opcional) Los temas son un conjunto de colores que se aplican en la interfaz, tanto en el fondo como en el texto en el editor. VSCode tiene bastantes temas para personalizar la experiencia. Es importante que esto se haga de acuerdo al gusto personal.\nMis temas favoritos son:\n Visual Studio Blue Este es un tema claro y el que uso durante el día o en habitaciones con muy buena iluminación. Blue fue el tema que usaba cuando aprendí a programar en VS 2017, entonces estoy sesgada  Dracula Este es un kit de temas oscuros que uso cuando estoy programando por las noches o en habitaciones con poca iluminación.  Para ver más temas, puedes consultar VSCode Themes o directamente desde las extensiones en VSCode.\nGit y GitHub (opcional) Es una buena práctica llevar una gestión de cambios en todos los archivos que generemos con código. A veces pueden pasar desastres en nuestras computadoras y podemos perder todo. GitHub es un sitio donde se pueden gestionar todos los repositorios Git en la nube, gestionar colaboraciones entre equipos, entre otras cosas.\nMuchos desarrolladores usan GitHub como un portafolio para mostrar a posibles empleadores los proyectos en los que han trabajado.\nPara configurar GitHub y Git, seguiremos estos pasos:\n Registro en GitHub. Es muy simple. Configuración de Git en nuestro sistema con el usuario y el correo utilizado al registrarnos en GitHub.  Abrimos Git CMD en Windows o Terminal en MacOS / Linux. Los siguientes comandos modifican la identidad.\n$ git config --global user.name \"Mi Usuario GitHub\" $ git config --global user.email correo@ejemplo.com Revisamos que los cambios se hayan hecho con el siguiente comando:\n$ git config --list ","description":"","tags":null,"title":"Configuración","uri":"/datlab/basics/configuration/"},{"content":"Changelog 0.0.4 (2022-04-26) Actualización a Análisis de datos en Python  Creación de ejercicios y tareas de los temas Bucles y Manejo de datos Placeholders para Visualizaciones, Analisis estadistico y tentativamente, Proyecto final  Mantenimiento  Limpieza de archivos ejemplo  0.0.3 (2022-04-21) Actualización a Análisis de datos en Python  Creación de ejercicios y tareas del tema Primer programa  0.0.2 (2022-04-20) Creación material del taller Análisis de datos en Python  Creación de la sección Análisis de datos en Python Creación de ejercicios y tareas del tema Introducción a Python  Mantenimiento  Limpieza de archivos ejemplo sin usar  0.0.1 (2022-04-19) Primer borrador del sitio  Creación de la sección de Inicio  Mantenimiento  Migración del theme Learn a Relearn para evitar el bug que ocasionaba el landing page URL cuando existe un idioma distinto al inglés.  ","description":"","tags":null,"title":"Historia","uri":"/datlab/basics/history/"},{"content":"Dat Lab Dat Lab es un espacio que nace por la idea de aportar herramientas necesarias a personas con poca o nulo acercamiento a programación, pero que tienen interés en mejorar su productividad (sea en investigación, sector público o privado) y así dar una recarga a su portafolio de habilidades técnicas.\nTengo muchas más ideas en mente para futuros cursos, por ejemplo:\n Bases de Ciencia de Datos Machine Learning para todos Estadística aplicada Optimización y Heurísticas Composición de documentos y presentaciones con LaTeX  Si alguno de estos temas te interesa, ¡contáctame! Seguro que algo podremos convenir.\n¿Quién escribe esto? Me llamo Mariel. Soy una mexicana que fruta vendía, ciruela, chabacano… . Estudié ingeniería química e hice una maestría en Investigación de Operaciones. He trabajado más de 7 años en la industria de software, trabajando en varios frentes como implementación, soporte técnico, investigación y desarrollo de software.\nDespués de unos de años trabajando en esta industria, decidí tomar un tiempo para contribuir un poco a la sociedad y hacer más accesibles las herramientas de análisis.\nPara más información sobre mi experiencia y/o lo que estoy haciendo actualmente, puedes visitar mi sitio de GitHub o mi perfil de LinkedIn\n","description":"","tags":null,"title":"About","uri":"/datlab/more/about/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/datlab/categories/"},{"content":"Colaboradores Gracias a todos los que han contribuido en el proyecto Relearn.\n¡Gracias a ustedes!\n","description":"","tags":null,"title":"Créditos","uri":"/datlab/more/credits/"},{"content":"Dat Lab Aquí encontrarás los materiales preparados para acompañar los talleres de Python y de Análisis de datos. Si bien este material puede ser usado de forma independiente, el objetivo es mayormente como apoyo a las sesiones en vivo.\n","description":"","tags":null,"title":"Dat Lab","uri":"/datlab/"},{"content":"To be added\n","description":"","tags":null,"title":"Escaparate","uri":"/datlab/more/showcase/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/datlab/tags/"}]